Toke Sequence for code:
double
func
double
a
double
x
=
sqrt
a
;
double
y
=
sqrt
a
;
if
y
!=
0
x
=
x
/
y
;
return
x
;
Graph Nodes and Related Information:
Node 1: [TokenIndex=---,Type=BEGIN,Role=BLOCKDEFAULT,Kind=BRANCH,Name=---]
Node 2: [TokenIndex=---,Type=EXIT,Role=BLOCKDEFAULT,Kind=BRANCH,Name=---]
Node 3: [TokenIndex=4,Type=DOUBLE,Role=ParameterIntr,Kind=VARIABLE,Name=a]
Node 4: [TokenIndex=6,Type=DOUBLE,Role=LocVarIntr,Kind=VARIABLE,Name=x]
Node 5: [TokenIndex=9,Type=DOUBLE,Role=InvocationArgument,Kind=VARIABLE,Name=a]
Node 6: [TokenIndex=12,Type=DOUBLE,Role=LocVarIntr,Kind=VARIABLE,Name=y]
Node 7: [TokenIndex=15,Type=DOUBLE,Role=InvocationArgument,Kind=VARIABLE,Name=a]
Node 8: [TokenIndex=17,Type=Ifcondition,Role=BLOCKDEFAULT,Kind=BRANCH,Name=---]
Node 9: [TokenIndex=18,Type=DOUBLE,Role=CompareOperatorLeft,Kind=VARIABLE,Name=y]
Node 10: [TokenIndex=---,Type=IfCONVERGE,Role=BLOCKDEFAULT,Kind=BRANCH,Name=---]
Node 11: [TokenIndex=---,Type=IfThen,Role=BLOCKDEFAULT,Kind=BRANCH,Name=---]
Node 12: [TokenIndex=21,Type=DOUBLE,Role=Assigned,Kind=VARIABLE,Name=x]
Node 13: [TokenIndex=23,Type=DOUBLE,Role=MathOperatorLeft,Kind=VARIABLE,Name=x]
Node 14: [TokenIndex=25,Type=DOUBLE,Role=MathOperatorRight,Kind=VARIABLE,Name=y]
Node 15: [TokenIndex=27,Type=Returnexit,Role=BLOCKDEFAULT,Kind=BRANCH,Name=---]
Node 16: [TokenIndex=28,Type=DOUBLE,Role=ReturnExper,Kind=VARIABLE,Name=x]
Graph Edges: 
1 -> 3
3 -> 5
5 -> 4
3 -> 7
7 -> 6
6 -> 9
9 -> 8
8 -> 11
11 -> 12
13 -> 12
4 -> 13
14 -> 12
6 -> 14
12 -> 10
8 -> 10
10 -> 16
12 -> 16
16 -> 15
15 -> 2
16 -> 2